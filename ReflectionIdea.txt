Source: https://stackoverflow.com/questions/7698237/whats-the-proper-way-to-use-reflection-to-instantiate-objects-of-unknown-classe

Main Example:
//This is all an assumption. Not sure whats actually happening

//This would determine which class we are dealing with based on user input String name
Class c = Class.forName(name);

//This makes a placeholder constructor based on the class (determined earlier)
//It includes the potential parameters in the brackets, of course we shall change these
Constructor ctor = c.getConstructor(Integer.class, Integer.class);

//This is just sample code. Doesn't mean too much. For Testing purposes
Integer param1 = hm.get("xPos") ...;
Integer param2 = hm.get("yPos") ...;

//This actually instantiates the object. 
Object instanceOfTheClass = ctor.newInstance(param1, param2);
//The "Object" can probably be changed



//Another Example:
import java.lang.reflect.Constructor;
import java.util.*;

public class InstantiateWithReflectionIncludingArgs {
    public static void main(String[] args) throws Exception {
        String className = args[0];
        List<Object> argList = new ArrayList<Object>();
        if (args.length > 1) {
            argList.addAll(Arrays.asList(args).subList(1, args.length));
        }
        Class c = Class.forName(className);
        List<Class<?>> argTypes = new ArrayList<Class<?>>();
        for (Object arg : argList) {
            argTypes.add(arg.getClass());
        }
        Constructor constructor = c.getConstructor(
            argTypes.toArray(new Class<?>[argTypes.size()]));
        Object o = constructor.newInstance(
            argList.toArray(new Object[argList.size()]));
        System.out.println("Created a " + o.getClass() + ": " + o);
    }
}
